data.frame(
accuracy = accuracy,
error = error,
true_positive_rate = true_positive_rate,
false_positive_rate = false_positive_rate
)
)
}
NNet <- nn_module(
initialize = function(p, q1, q2, q3){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
self$output <- nn_linear(q3,1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
self$hidden1() %>%
self$activation() %>%
self$hidden2()
self$activation() %>%
self$hidden3() %>%
self$activation() %>%
self$output() %>%
self$sigmoid()
}
)
NNet <- nn_module(
initialize = function(p, q1, q2, q3){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
self$output <- nn_linear(q3, 1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
self$hidden1() %>%
self$activation() %>%
self$hidden2()
self$activation() %>%
self$hidden3() %>%
self$activation() %>%
self$output() %>%
self$sigmoid()
}
)
M3 <- model.matrix(spam ~ 0 + ., data = df2_train)
M4 <- model.matrix(spam ~ 0 + ., data = df2_test)
nnet_fit <- NNet %>%
setup(
loss = nn_bce_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M3), q1=32, q2=16, q3=8
) %>%
set_opt_params(
lr=0.005
) %>%
fit(
data = list(
M3,
df_train %>% select(spam) %>% as.matrix
),
valid_data = list(
M4,
df_test %>% select(spam) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
M3 <- model.matrix(spam ~ 0 + ., data = df2_train)
M4 <- model.matrix(spam ~ 0 + ., data = df2_test)
nnet_fit <- NNet %>%
setup(
loss = nn_bce_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M3), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
data = list(
M3,
df_train %>% select(spam) %>% as.matrix
),
valid_data = list(
M4,
df_test %>% select(spam) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
M3 <- model.matrix(spam ~ 0 + ., data = df2_train)
M4 <- model.matrix(spam ~ 0 + ., data = df2_test)
nnet_fit <- NNet %>%
setup(
loss = nn_bce_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M3), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
data = list(
M3,
df2_train %>% select(spam) %>% as.matrix
),
valid_data = list(
M4,
df2_test %>% select(spam) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
NNet <- nn_module(
initialize = function(p, q1, q2, q3){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
self$output <- nn_linear(q3,1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
self$hidden1() %>%
self$activation() %>%
self$hidden2()
self$activation() %>%
self$hidden3() %>%
self$activation() %>%
self$output() %>%
self$sigmoid()
}
)
M <- model.matrix(median_house_value ~ 0 + . -households, data = df_train)
M2 <- model.matrix(median_house_value ~ 0 + . -households, data = df_test)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
data = list(
M,
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
M2,
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
NNet <- nn_module(
initialize = function(p, q1, q2, q3){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
self$output <- nn_linear(q3,1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$hidden2()
self$activation() %>%
self$hidden3() %>%
self$activation() %>%
self$output() %>%
self$sigmoid()
}
)
M <- model.matrix(median_house_value ~ 0 + . -households, data = df_train)
M2 <- model.matrix(median_house_value ~ 0 + . -households, data = df_test)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
data = list(
M,
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
M2,
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
M <- model.matrix(median_house_value ~ 0 + . -households, data = df_train)
M2 <- model.matrix(median_house_value ~ 0 + . -households, data = df_test)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
x = M
data = list(
M <- model.matrix(median_house_value ~ 0 + . -households, data = df_train)
M2 <- model.matrix(median_house_value ~ 0 + . -households, data = df_test)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
x = M,
data = list(
M,
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
M2,
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
M <- model.matrix(median_house_value ~ 0 + . -households, data = df_train)
M2 <- model.matrix(median_house_value ~ 0 + . -households, data = df_test)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
data = list(
M,
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
M2,
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
NNet <- nn_module(
initialize = function(p, q1, q2, q3){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
self$output <- nn_linear(q3, 1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$hidden2()
self$activation() %>%
self$hidden3() %>%
self$activation() %>%
self$output() %>%
self$sigmoid()
}
)
M3 <- model.matrix(spam ~ 0 + ., data = df2_train)
M4 <- model.matrix(spam ~ 0 + ., data = df2_test)
nnet_fit <- NNet %>%
setup(
loss = nn_bce_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M3), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
data = list(
M3,
df2_train %>% select(spam) %>% as.matrix
),
valid_data = list(
M4,
df2_test %>% select(spam) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
data = list(
as.matrix(df[-test_ind, -1]),
as.numeric(df[-test_ind, 1]) - 1
#df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
as.matrix(df[-test_ind, -1]),
as.numeric(df[-test_ind, 1]) - 1
#M2,
#df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
M <- model.matrix(median_house_value ~ 0 + . -households, data = df_train)
M2 <- model.matrix(median_house_value ~ 0 + . -households, data = df_test)
nnet_fit <- NNet %>%
setup(
loss = nn_bce_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
M,
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
M2,
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
metrics = list(
luz_metric_binary_accuracy()
)
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
M,
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
M2,
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
generate_three_spirals <- function(){
set.seed(42)
n <- 500
noise <- 0.2
t <- (1:n) / n * 2 * pi
x1 <- c(
t * (sin(t) + rnorm(n, 0, noise)),
t * (sin(t + 2 * pi/3) + rnorm(n, 0, noise)),
t * (sin(t + 4 * pi/3) + rnorm(n, 0, noise))
)
x2 <- c(
t * (cos(t) + rnorm(n, 0, noise)),
t * (cos(t + 2 * pi/3) + rnorm(n, 0, noise)),
t * (cos(t + 4 * pi/3) + rnorm(n, 0, noise))
)
y <- as.factor(
c(
rep(0, n),
rep(1, n),
rep(2, n)
)
)
return(tibble(x1=x1, x2=x2, y=y))
}
generate_three_spirals()
generate_three_spirals <- function(){
set.seed(42)
n <- 500
noise <- 0.2
t <- (1:n) / n * 2 * pi
x1 <- c(
t * (sin(t) + rnorm(n, 0, noise)),
t * (sin(t + 2 * pi/3) + rnorm(n, 0, noise)),
t * (sin(t + 4 * pi/3) + rnorm(n, 0, noise))
)
x2 <- c(
t * (cos(t) + rnorm(n, 0, noise)),
t * (cos(t + 2 * pi/3) + rnorm(n, 0, noise)),
t * (cos(t + 4 * pi/3) + rnorm(n, 0, noise))
)
y <- as.factor(
c(
rep(0, n),
rep(1, n),
rep(2, n)
)
)
return(tibble(x1=x1, x2=x2, y=y))
}
df <- generate_three_spirals()
plot(
df$x1, df$x2,
col = df$y,
pch = 20
)
?expand.grid()
grid <- expand.grid(x1 = seq(-10, 10, length.out = 100), x2 = seq(-10, 10, length.out = 100))
grid
df_test <- as.tibble(grid)
df_test <- tibble(grid)
df_test
str(df_test)
grid <- expand.grid(x1 = seq(-10, 10, length.out = 100), x2 = seq(-10, 10, length.out = 100))
df_test <- tibble(grid)
View(df)
rpart_fit <- rpart(y ~ x1 + x2, data = df)
rpart_classes <- (rpart_fit, df$y)
rpart_classes <- predict(rpart_fit, df$y)
rpart_fit <- rpart(y ~ ., data = df)
rpart_classes <- predict(rpart_fit, df$y)
rpart_fit <- rpart(y ~ df$x1 + df$x2, data = df)
rpart_classes <- predict(rpart_fit, df$y)
rpart_classes
plot_decision_boundary <- function(predictions){
plot(
df_test$x1, df_test$x2,
col = predictions,
pch = 0
)
points(
df$x1, df$x2,
col = df$y,
pch = 20
)
}
plot_decision_boundary(rpart_classes)
df <- generate_three_spirals()
plot(
df$x1, df$x2,
col = df$y,
pch = 20
)
df
grid <- randn(100, expand.grid(x1 = seq(from = -10, to = 10, length.out = 100), x2 = seq(from = -10, to = 10, length.out = 100)))
grid <- expand.grid(x1 = seq(-10, 10, length.out = 100), x2 = seq(-10, 10, length.out = 100))
df_test <- tibble(grid)
df_test
