self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
#self$output <- nn_linear(q3,1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$hidden2()
self$activation() %>%
self$hidden3() %>%
#self$activation() %>%
#self$output() %>%
self$sigmoid()
}
)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
metrics = list(
luz_metric_binary_accuracy()
)
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_train),
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_test),
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
NNet <- nn_module(
initialize = function(p, q1, q2, q3){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
self$output <- nn_linear(q3,1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$hidden2()
self$activation() %>%
self$hidden3() %>%
self$activation() %>%
self$output() %>%
self$sigmoid()
}
)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
metrics = list(
luz_metric_binary_accuracy()
)
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_train),
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_test),
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
NNet <- nn_module(
initialize = function(p, q1, q2, q3){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
self$output <- nn_linear(q3,1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$hidden2() $>$
NNet <- nn_module(
initialize = function(p, q1, q2, q3){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
self$output <- nn_linear(q3,1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$hidden2() %>%
self$activation() %>%
self$hidden3() %>%
self$activation() %>%
self$output() %>%
self$sigmoid()
}
)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
metrics = list(
luz_metric_binary_accuracy()
)
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_train),
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_test),
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
M <- model.matrix(median_house_value ~ 0 + . -households, data = df_train)
M
M <- model.matrix(median_house_value ~ 0 + . -households, data = df_train)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
metrics = list(
luz_metric_binary_accuracy()
)
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_train),
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_test),
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
M <- model.matrix(median_house_value ~ 0 + . -households, data = df_train)
nnet_fit <- NNet %>%
setup(
loss = nn_bce_loss(),
optimizer = optim_adam,
metrics = list(
luz_metric_binary_accuracy()
)
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_train),
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_test),
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
ncol(M)
df_train
View(df_train)
str(M)
str(M)
str(df_train)
M <- model.matrix(median_house_value ~ 0 + . -households, data = df_train)
nnet_fit <- NNet %>%
setup(
loss = nn_bce_loss(),
optimizer = optim_adam,
metrics = list(
luz_metric_binary_accuracy()
)
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_train),
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_test),
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
metrics = list(
luz_metric_binary_accuracy()
)
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_train),
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_test),
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
metrics = list(
luz_metric_binary_accuracy()
)
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_train, requires_grad = TRUE),
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_test, requires_grad = TRUE),
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
M <- model.matrix(median_house_value ~ 0 + . -households, data = df_train, requires_grad = TRUE)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
metrics = list(
luz_metric_binary_accuracy()
)
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_train, requires_grad = TRUE),
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_test, requires_grad = TRUE),
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
metrics = list(
luz_metric_binary_accuracy()
)
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_train, requires_grad = TRUE) %>% detach(),
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_test, requires_grad = TRUE) %>% detach(),
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
NNet <- nn_module(
initialize = function(p, q1, q2, q3){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
self$output <- nn_linear(q3, 1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$hidden2() %>%
self$activation() %>%
self$hidden3() %>%
self$activation() %>%
self$output() %>%
self$sigmoid()
}
)
M3 <- model.matrix(spam ~ 0 + ., data = df2_train)
M4 <- model.matrix(spam ~ 0 + ., data = df2_test)
nnet_fit <- NNet %>%
setup(
loss = nn_bce_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M3), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
data = list(
M3,
df2_train %>% select(spam) %>% as.matrix
),
valid_data = list(
M4,
df2_test %>% select(spam) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
M3 <- model.matrix(spam ~ 0 + ., data = df2_train)
M4 <- model.matrix(spam ~ 0 + ., data = df2_test)
nnet_fit <- NNet %>%
setup(
loss = nn_bce_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M3), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
data = list(
M3,
torch_tensor(df2_train$spam, dtype = torch_float())
),
valid_data = list(
M4,
torch_tensor(df2_test$spam, dtype = torch_float())
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
M3 <- model.matrix(spam ~ 0 + ., data = df2_train)
M4 <- model.matrix(spam ~ 0 + ., data = df2_test)
nnet_fit <- NNet %>%
setup(
loss = nn_bce_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M3), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
data = list(
torch_tensor(M3),
torch_tensor(df2_train$spam, dtype = torch_float())
),
valid_data = list(
torch_tensor(M4),
torch_tensor(df2_test$spam, dtype = torch_float())
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
M3 <- model.matrix(spam ~ 0 + ., data = df2_train)
M4 <- model.matrix(spam ~ 0 + ., data = df2_test)
nnet_fit <- NNet %>%
setup(
loss = nn_bce_loss(),
optimizer = optim_adam,
) %>%
set_hparams(
p=ncol(M3), q1=32, q2=16, q3=8
) %>%
set_opt_hparams(
lr=0.005
) %>%
fit(
data = list(
torch_tensor(M3),
torch_tensor(df2_train$spam, dtype = torch$float32)
),
valid_data = list(
torch_tensor(M4),
torch_tensor(df2_test$spam, dtype = torch$float32)
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
M <- model.matrix(median_house_value ~ 0 + . -households, data = df_train)
nnet_fit <- NNet %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_adam,
metrics = list(
luz_metric_binary_accuracy()
)
) %>%
set_hparams(
p = ncol(M), q1 = 32, q2 = 16, q3 = 8
) %>%
set_opt_hparams(
lr = 0.01
) %>%
fit(
data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_train),
df_train %>% select(median_house_value) %>% as.matrix
),
valid_data = list(
model.matrix(median_house_value ~ 0 + . -households, data = df_test),
df_test %>% select(median_house_value) %>% as.matrix
),
epochs = 50,
dataloader_options = list(num_workers = 0),
verbose = TRUE # Change to TRUE while tuning. But, set to FALSE before submitting
)
nn_fit
nn_fit()
